package Carlos.Lopez;

import Carlos.Lopez.MaterialCategories;
import Carlos.Lopez.Rod;
import java.util.*;//Scanner,String tokenizer, vector
import java.io.File;
import java.io.IOException;

public class ReadData
{
	public double [] coefficients;
	public double [] youngModulus;
	
	public Vector vectorData(String fileName)
	{
		Vector v = new Vector();
		
		try
		{
			File file = new File("data.txt");
			Scanner scan = new Scanner(file);
			Scanner scanFile2 = new Scanner(file);
			
			int lineCounter = 0;
			while(scanFile2.hasNextLine())
			{
				//Originally forgot to advance the scanner.
				//Also forgot to use a different scanner for this 
				//and the while loop below.
				scanFile2.nextLine();
				lineCounter++;
			}
			double [] thermalCoArray = new double[lineCounter];
			double [] youngsCoArray = new double[lineCounter];
			int index = 0;
			////////////////////////////////////////
			//This reads data line by line
			while(scan.hasNextLine())
			{
				String line = scan.nextLine();		
				StringTokenizer strngToknzr = new StringTokenizer(line, ",");
				String temp = strngToknzr.nextToken();
				MaterialCategories materialCat = MaterialCategories.valueOf(temp);
				String nameOfMaterial = strngToknzr.nextToken();
				String temp2 = strngToknzr.nextToken();
				double crossSectionArea = Double.parseDouble(temp2);
				String temp3 = strngToknzr.nextToken();
				double lengthOfRod = Double.parseDouble(temp3);
				String temp4 = strngToknzr.nextToken();
				double aCoefficientThermal = Double.parseDouble(temp4);
				String temp5 = strngToknzr.nextToken();
				double yCoefficient = Double.parseDouble(temp5);	
				String temp6 = strngToknzr.nextToken();
				int tempr = Integer.parseInt(temp6);

				//Creation of rod object
				Rod newRod = new Rod(nameOfMaterial, crossSectionArea, lengthOfRod, tempr);
				//Must use a method to add this, not just pass it as a Rod(attribute)
				newRod.setCategoryOfMaterial(materialCat);
				//Adding the last two bits of info from the data file
				thermalCoArray[index] = aCoefficientThermal;
				youngsCoArray[index] = yCoefficient;
				//Adding object into vector
				v.add(newRod);
				index++;
			}
			//////////////////////////////////////////
		
		}
		catch (IOException ioe)
		{
			System.out.println(ioe.getMessage());
		}	
		return v;
	}
	
	public Vector sortVector(Vector incomingV)
	{
		//Creation of a sorted vector,
		//It doesn't have sorted elements yet
		Vector sortedV = new Vector();
		//An array is created that will be filled
		//with the unsorted values of the incoming vector
		Rod [] unsortedRods = new Rod[v.size()];
		
		//Easier to sort arrays than it is to sort a vector
		
		//For loop to pull everything out of the unsorted vector
		//and put it into an array
		for(int i = 0; i < incomingV.size(); i++)
		{
			Object o1 = incomingV.get(i);
			Rod aRod = (Rod)o1;
				
		}
		
		int subArrayLength = 0;
		int index = 0;
		//"Bubble sort"
		//This loop goes through the array of unsorted elements
		for(int j = 0; j <= unsortedRods.length - 1; j++)
		{	
			//Sets the length of the array to search through
			subArrayLength = (unsortedRods.length - j);
			index = 0;
			//A for loop to find the smallest element in the subarray
			for(int k = 1; k < subArrayLength; k++)
			{
				//A comparison of the object at k with the object at index
				if(unsortedArray[k].getTemp() < unsortedArray[index].getTemp()) 
				{
					index = k;
				}
			}
			//The loop then goes to the object at the index
			//with the smallest value and gets the info
			double coetemp = coefficients [index]; 
			coefficients [index] = coefficients[rodArray.length-1-j];
			
			coefficients[rodArray.length-1-j] = coetemp;
			double Youngtemp = Young [index]; 
			Young [index] = Young [unsortedArray.length-1-j]; 
			Young [unsortedArray.length-1-j] = Youngtemp;
			Rod temp = unsortedArray [index]; 
			unsortedArray [index] = unsortedArray[unsortedArray.length-1-j];
			unsortedArray[unsortedArray.length-1-j] = temp;
		}
		
		//This loop takes the elements in the now sorted array
		//and puts them into a new vecotr
		for(int k = 0; k <= unsortedArray.length - 1; k++)
		{
			sortedV.addElement(unsortedArray[k]);
		}
		
		return sortedV;
	}
	public int searchVector(Vector sv, int Key)
	{
		//Make an array of the same size as the imported vector
		Rod [] rodArray = new Rod[sv.size()];
		//For loop to pull the elements out of sv vector into the array
		for(int i = 0; i < sv.size(); i++)
		{
			//Create a "Object" out of the sv element
			Object newRodObj = sv.elementAt(i);
			//Add that "Object" to the array to search
			//Typecast it first
			rodArray[i] = (Rod)newRodObj;
		}
		int start = 0;
		int end = rodArray.length-1;
		//While the end( one less than the length of the array)
		while(end >= start)
		{
			//Sets the middle point
			int middle = (end+start)/2;
			//System.out.println(rodArray[middle].getTemp());
			//Checks to see if the element at the middle of the whole
			//array is the key
			if(rodArray[middle].getTemp() == key)
			{
				//System.out.println("Hey");
				return middle; 
			}
			
			else 
			{
				//Compares to see if the key is bigger or smaller than
				//the element at the middle
			
				//If the element at the middle is smaller, then
				//the prog knows the key is in the second half of the 
				//array
				if(rodArray[middle].getTemp() < key)
				{
					end = middle-1; 
				}
				
				//If the element at the middle is bigger, then
				//the prog knows the key is in the first half
				else
				{
					start = middle+1; 
				}
				//Loops back to the top and checks half of the array
			}
		}
		return -1;
		
		/*for(int c = 0; c < sv.size(); c++)
		{
			Object o1 = sv.get(c);
			Rod aRod = (Rod)o1;
			
			if(Key == aRod.getTemperature())
			{
				indexOfV = c;
			}
		}*/
	}
}
